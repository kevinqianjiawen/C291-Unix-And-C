struct point{
       int x;
       int y;
};

struct point P;
struct point Q;
P.x =1
P.y =2
Q.y =2


typedef struct point[
	int x;
	int y;
} point_t

point_t z;

int p-sum(point_t *p2){
    p2->x = p2->x + p2->y;
    return (p2->x);
}

point_t a;
a.x = 1;
a.y = 2;

int main(void){
    printf("%d\n", p-sum(&a));
    printf("%d\n", a.x);
}

typedef struct user{
	int index;
	char * fname;
	char * lname;
}user_t;

void main(void){
     user_t user1;
     user1.index =1;
     user1.fname ="John";
     user1.lname ="Smith";
}

void main(void){
     user_t users[100];
     users[0].index = 1;
     users[0].fname = "John";
     users[0].lname = "smith";
     modify_user( &(users+5), 1, "Joe", "Doe");
}
void modify_user( user_t *u, int index, char *fname, char *lname){
     u->index = index;
     u->fname = fname; (pointer)
     u->lname = lname;
}

void int_user (user_t *u, int size){
     int i;
     for(i =0; i<size; i++){
     	   u->index = 0;
	   u->lname = null;
	   u->fname = null;
	   u++;
     }
}

struct ComplexNumber{
       double real;
       double imaginary;
}

struct parameters{
       struct ComplexNumber complex;
       double value;
}

struct parameters param;
param.complex.real = 4.3;

struct tag{
       char lname[20];
       char fname[20];
}

struct tag names[100];

void print_tags(struct tag *n, int size){
     int i;
     for(i = 0; i < size; i++){
     	   printf("%s, %s\n", n->lname, n->fname);
	   N++;
     }
}

main(){
	print_tags(names, 50);
}